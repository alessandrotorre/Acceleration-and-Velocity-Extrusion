//   This is a component for EMC2 HAL
//   Copyright 2016 Alessandro Torre <alessandro.torrebo@gmail.com>
//
//   This program is free software; you can redistribute it and/or modify
//   it under the terms of the GNU General Public License as published by
//   the Free Software Foundation; either version 2 of the License, or
//   (at your option) any later version.
//
//   This program is distributed in the hope that it will be useful,
//   but WITHOUT ANY WARRANTY; without even the implied warranty of
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//   GNU General Public License for more details.
//
//   You should have received a copy of the GNU General Public License
//   along with this program; if not, write to the Free Software
//   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
component VelocityExtrusion "Compute the position of the 4th axis related to the cross section area of the xy trajectory";

//#include <rtapi_math.h>
// FROM GUI
pin in float Nozzle;
pin in float Diametro_Filamento;
pin in float Vretraction;
pin in float Vprecharge;
pin in float precharge_mm;
pin in float retraction_mm;
pin in float Altezza_layer; 
pin in float K;         	//PROPORTIONAL CORRECTIVE FACTOR FOR THE ACCELERATION TERM


//FROM HAL
//pin in float Vx;		//X AXIS VELOCITY 
//pin in float Vy;		//Y AXIS VELOCITY
pin in float Vxy;  	        //NOZZLE VELOCITY IN THE CARTESIAN SPACE [mm/s] FROM motion.current-vel
pin in float Acc_xy;		//NOZZLE ACCELERATION IN THE CARTESIAN SPACE [mm/s2] FROM ddt_v.out
pin in float Apos_rel;		//RELATIVE POSITION OF EXTRUDER A AXIS [mm] FROM halui.axis.3.pos-relative
pin in float Apos_abs;		//ABSOLUTE POSITION OF EXTRUDER A AXIS [mm] FROM halui.axis.3.pos-commanded
pin in float motor_pos_cmd;	//MANUAL COMMANDED POSITION OF EXTRUDER A AXIS [mm] FROM axis.3.motor-pos-cmd
pin in float motor_pos_fb;	//DISPLAYED POSITION CONSIDERING OFFSET LIKE G92

// A=[mm] is the position, Va=[mm/s] Acc_a=[mm2/s]
pin out float A; 		//COMMANDED POSITION OF THE A AXIS CALCULATED BY THIS COMPONENT [mm]
pin out float A_fb;
pin out float Va;		//VELOCITY OF THE A AXIS CALCULATED BY THIS COMPONENT [mm/s]
pin out float Acc_a;		//ACCELERATION OF THE A AXIS CALCULATED BY THIS COMPONENT [mm/s2]


//TO GUI
pin out float Nozzle_out;	//TO GUI NOZZLE LABEL
pin out float Altezza_layer_out;//TO GUI LAYER HEIGHT LABEL
pin out bit isretracted;	//TO GUI LED
pin out bit isprecharged;   	//TO GUI LED
pin out bit islinked;		//TO GUI LED
pin out bit isenabled;		//TO GUI LED

//Debug
pin out float AreaFilamento;	// AREA OF FILAMENT d^2*PI/4
pin out float Apos_fixed;	// STORED POSITION BEFORE RETRACTION OR PRECHARGE
pin out float A_debug;		// CUMULATIVE POSITION WITHOUT ACCELERATION COMPONENT
pin out float A1_debug;		// INSTANTANEUSLY POSITION WITHOUT ACCELERATION COMPONENT
pin out float A2_debug;		// INSTANTANEUSLY POSITION WITH ACCELERATION COMPONENT
pin out float Area_u; 		// EXIT AREA AFTER EXTRUSION LAYER_HEIGHT*NOZZLE_DIAMETER [mm2]     
pin out float A_temp;


pin in s32 status;


function _;
license "GPL";
;;
#include <rtapi_math.h>
FUNCTION(_){

//TO GUI
Nozzle_out=Nozzle;
Altezza_layer_out=Altezza_layer;


// LEGEND ABOUT THE "status" PIN FROM MCODE
// 0 not enable
// 1 linked
// 2 not linked
// 3 retraction
// 4 precharge


switch(status)
{
  case (0):   // 0 not enable
	islinked=0;			//TO GUI LED
	isretracted=0 ;			//TO GUI LED
	isprecharged=0;			//TO GUI LED
	isenabled=0;			//TO GUI LED
	Apos_fixed=Apos_rel;
	A=motor_pos_cmd;
	A_fb=motor_pos_fb;
	break;
  case (1):   // 1 linked
	islinked=1;			//TO GUI LED
	isretracted=0 ;			//TO GUI LED
	isprecharged=0;			//TO GUI LED
	isenabled=1;			//TO GUI LED
	Area_u=Altezza_layer*Nozzle;						//EXIT AREA [mm2]
	AreaFilamento = (Diametro_Filamento*Diametro_Filamento*3.141)/(4); 	//FILAMENT SECTION [mm2]
	//Vxy=sqrt(Vx*Vx+Vy*Vy)							//CARTESIAN VELOCITY [mm/S]
	Va=(Vxy*Area_u)/(AreaFilamento);					//EXTRUSION VELOCITY [mm/s]
	Acc_a=Acc_xy*Area_u/AreaFilamento;    					//EXTRUSION ACCELERATION [mm/s2] 
	A_temp=A_temp+(Va*fperiod)+(K*Acc_a*fperiod*fperiod);			//CUMULATIVE EXTRUSION POSITION [mm] A+ offset G92 (Apos_rel)
	A_debug=A_debug+Va*fperiod;						//DEBUG:CUMULATIVE EXTRUSION POSITION WITHOUT ACCELERATION COMPONENT [mm]
	A1_debug=Va*fperiod;							//DEBUG: INSTANTANEUSLY EXTRUSION POSITION WITHOUT ACCELERATION COMPONENT [mm]
	A2_debug=Va*fperiod+K*Acc_a*fperiod*fperiod;				//DEBUG: INSTANTANEUSLY EXTRUSION POSITION WITH ACCELERATION COMPONENT [mm]
	A=A_temp;
	A_fb=A+motor_pos_fb;
	break;
	
  case (2):   // 2 not linked
	islinked=0;			//TO GUI LED
	isretracted=0 ;			//TO GUI LED
	isprecharged=0;			//TO GUI LED
	isenabled=1;			//TO GUI LED
	break;
  
  case (3):   // 3 retraction
	islinked=0;			//TO GUI LED
	isprecharged=0;			//TO GUI LED
	isenabled=1;			//TO GUI LED
	if (Apos_rel>=Apos_fixed)		
	    Apos_fixed=A=Apos_rel;		//STORE THE POSITION BEFORE RETRACTION
	if ( A_temp > (Apos_fixed-retraction_mm) ){
		Va=-Vretraction;	//SETS NEGATIVE VELOCITY UNITL THE RETRACTION LENGHT IS REACHED
		isretracted=0;		//TO GUI LED
		}
	else {
		Va=0;			//SETS 0 VELOCITY WHEN THE RETRACTION LENGHT IS REACHED
		isretracted=1;		//TO GUI LED
	}
	A_temp=A_temp+(Va*fperiod)+(K*Acc_a*fperiod*fperiod);				//CUMULATIVE EXTRUSION POSITION [mm] A
	A=A_temp;
	A_fb=A+motor_pos_fb;
	break;
  case (4):    // 4 precharge
	islinked=0;			//TO GUI LED
	isretracted=0;			//TO GUI LED
	isenabled=1;			//TO GUI LED
	if (Apos_rel<=Apos_fixed)
	    Apos_fixed=A=Apos_rel;		//STORE THE POSITION BEFORE PRECHARGE
	if ( A_temp < (Apos_fixed+precharge_mm ) ){
		Va=Vprecharge;		//SETS POSITIVE VELOCITY UNITL THE PRECHARGE LENGHT IS REACHED
		isprecharged=0;		//TO GUI LED
	}
	else{
		Va=0;			//SETS 0 VELOCITY WHEN THE PRECHARGE LENGHT IS REACHED
		isprecharged=1;		//TO GUI LED
	}
	A_temp=A_temp+(Va*fperiod)+(K*Acc_a*fperiod*fperiod);				//CUMULATIVE EXTRUSION POSITION [mm] A
	A=A_temp;
	A_fb=A+motor_pos_fb;

	break;	
  
  
}

}
